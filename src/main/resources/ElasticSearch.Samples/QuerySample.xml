<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc reference="ElasticSearch.Samples.QuerySample" locale="">
  <web>ElasticSearch.Samples</web>
  <name>QuerySample</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>ElasticSearch.Samples.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1451602800000</creationDate>
  <date>1451602800000</date>
  <contentUpdateDate>1451602800000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>
In this sample we use groovy code to make an Elastic Search query and display the data using a provided function displaying a defined model.

{{groovy}}
 def es = xwiki.parseGroovyFromPage("ElasticSearch.Groovy");
 es.setServerURL("http://extensions.xwiki.org/activeinstalls/installs/_search?pretty")

 def model = [ [ name : "key", "isKey" : true, "prettyName" : "Week", "type" : "date", "format" : "E dd/MM/yyyy"], [ "name" : "instanceId_count", "prettyName" : "Install count", "type" : "number" ] ];
 def esquery = """
{
    "query": {
        "filtered": {
            "query": {
                "query_string": {
                  "query": "distributionVersion:* AND -distributionVersion:8.1-SNAPSHOT AND -distributionVersion:8.0-SNAPSHOT AND -distributionVersion:7.4-SNAPSHOT AND -distributionVersion:7.3-SNAPSHOT AND -distributionVersion:7.2-SNAPSHOT AND -distributionVersion:7.1-SNAPSHOT AND -distributionVersion:7.0-SNAPSHOT AND -distributionVersion:*SNAPSHOT AND -distributionVersion:*rc* AND -distributionVersion:*milestone*"
                }
            },
            "filter": {
                   "script" : {
                      "script" : "((doc['_timestamp'].value - doc['firstPingDate'].value) / 1000 &gt;= 86400)" 
                   }
            }
        }},
    "aggregations" : {
        "period": {
            "date_histogram": {
                "field":    "firstPingDate",
                "interval": "month"
            },
            "aggregations": {
                "instanceId_count": {
                    "cardinality": {
                        "field": "instanceId"
                    }
                }
           }
       }
    }
  }
 """

 def data = es.getData(esquery);
 println es.showBucketsData(data, model, "period", true)
 
 if (request.debug)
 println es.debugStr;

{{/groovy}}

This second example shows the same result but with full custom code:

{{groovy}}
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.DateTime;

 def es = xwiki.parseGroovyFromPage("ElasticSearch.Groovy");
 es.setServerURL("http://extensions.xwiki.org/activeinstalls/installs/_search?pretty")

 def esquery = """
{
    "query": {
        "filtered": {
            "query": {
                "query_string": {
                  "query": "distributionVersion:* AND -distributionVersion:8.1-SNAPSHOT AND -distributionVersion:8.0-SNAPSHOT AND -distributionVersion:7.4-SNAPSHOT AND -distributionVersion:7.3-SNAPSHOT AND -distributionVersion:7.2-SNAPSHOT AND -distributionVersion:7.1-SNAPSHOT AND -distributionVersion:7.0-SNAPSHOT AND -distributionVersion:*SNAPSHOT AND -distributionVersion:*rc* AND -distributionVersion:*milestone*"
                }
            },
            "filter": {
                   "script" : {
                      "script" : "((doc['_timestamp'].value - doc['firstPingDate'].value) / 1000 &gt;= 86400)" 
                   }
            }
        }},
    "aggregations" : {
        "period": {
            "date_histogram": {
                "field":    "firstPingDate",
                "interval": "month"
            },
            "aggregations": {
                "instanceId_count": {
                    "cardinality": {
                        "field": "instanceId"
                    }
                }
           }
       }
    }
  }
 """

 def data = es.getData(esquery);
 def dateFormatter = DateTimeFormat.forPattern("E dd/MM/yyyy");;

 try {
  if (data==null ||  data.aggregations==null || data.aggregations.period==null) {
   println "No data"
  } else {
   def buckets = data.aggregations.period.buckets;
   buckets = buckets.reverse();

   println "|= Week |= Install count"

   for (item in buckets) {
     println "| ${dateFormatter.print(new DateTime(item.key))} | ${item.instanceId_count.value}"
   }
  }
 } catch (e) {
   println e.getMessage();
 }
 
 if (request.debug)
 println es.debugStr;
{{/groovy}}</content>
</xwikidoc>
